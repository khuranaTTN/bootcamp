plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // Ques 1 Add a gradle dependency and its related repository url.
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    testRuntime group: 'junit', name: 'junit', version: '4.12'
    runtime group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
}


// Ques 2  Using java plugin, make changes in the manifest to make the jar executable.
//         Using java -jar JAR_NAME, the output should be printed as "Hello World"
jar {
    manifest {
        attributes 'Main-Class': 'Java1'
    }
}


//task showDate {
//    dependsOn build
//    println 'Current Date :' + new Date()
//}

//class ShowDate extends DefaultTask{
//    String dateMessage = "Date is: "
//
//    @TaskAction
//    void showDate(){
//        println dateMessage + new Date()
//    }
//}
//


// Ques 4: Create a custom plugin which contains a custom task which prints the current date-time.
//         Using that plugin in your project, execute that task after the jar task executes.
class DatePlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('ShowDate') {
            dependsOn("build")
            println "Date: " + new Date()
        }
    }
}

apply plugin: DatePlugin


// Ques 5: Instead of using default source set, use src/main/javaCode1,
// src/main/javaCode2 to be taken as code source. Make sure that the JAR created contains
// files from both the directories and not from src/main/java.

sourceSets {
    main {
        java.srcDirs = [ 'src/main/java','src/main/javaCode1', 'src/main/javaCode2']
    }
}
// Ques 6: Override the Gradle Wrapper task to install a different version of gradle. Make sure that the task written in Q4 also executes with it.
